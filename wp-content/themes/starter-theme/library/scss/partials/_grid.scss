////
/// @group Grid
////


/// Grid Columns
$columns: 12;
/// Grid Column Width
$column-width: 6%;
/// Gutter Width
$gutter-width: 2.3333333%;
/// Total Width
$total-width: 100%;

@function gridsystem-width($columns:$columns) {
  @return ($column-width * $columns) + ($gutter-width * $columns);
}

$total-width: gridsystem-width($columns);

body {
  width: 100%;
}

/// Row Mixin
/// This is mostly used for nesting purposes
/// @example
///     @include row(12);         
@mixin row($columns:$columns) {
  display: block;
  width: $total-width*(($gutter-width + gridsystem-width($columns))/gridsystem-width($columns));
  margin: 0 $total-width*((($gutter-width*.5)/gridsystem-width($columns))*-1);
  // *width: $total-width*(($gutter-width + gridsystem-width($columns))/gridsystem-width($columns))-$correction;
  //x/ *margin: 0 $total-width*((($gutter-width*.5)/gridsystem-width($columns))*-1)-$correction;
  @include clearfix;
}

/// Column Mixin
/// @example
///     @include column(8);     
@mixin column($x,$columns:$columns) {
  display: inline;
  float: left;
  width: $total-width*(((($gutter-width+$column-width)*$x)-$gutter-width) / gridsystem-width($columns));
  margin: 0 $total-width*(($gutter-width*.5)/gridsystem-width($columns));
  // *width: $total-width*(((($gutter-width+$column-width)*$x)-$gutter-width) / gridsystem-width($columns))-$correction;
  // *margin: 0 $total-width*(($gutter-width*.5)/gridsystem-width($columns))-$correction;
}

/// Push Mixin
/// @example
///     @include push(2);  
@mixin push($offset:1) {
  margin-left: $total-width*((($gutter-width+$column-width)*$offset) / gridsystem-width($columns)) + $total-width*(($gutter-width*.5)/gridsystem-width($columns));
}
/// Pull Mixin
/// @example
///     @include pull(2);  
@mixin pull($offset:1) {
  margin-right: $total-width*((($gutter-width+$column-width)*$offset) / gridsystem-width($columns)) + $total-width*(($gutter-width*.5)/gridsystem-width($columns));
}
